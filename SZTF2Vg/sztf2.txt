Öröklődés:
ősosztály <- leszármazott osztály
Polimorfizmus: bármely leszármazott osztály referenciával lehet hívítkozni az objektumra
lefele specializáció, felfele generalizáció
VMT: virtuális metódus tábla
mezők (adattagok, tulajdonságok), metódusok
Aggregáció: tartalmazási kapcsolat
Kompozíció: szimbiózis, egybe működik csak, erős kapcsolat

Interfész: T-vel, T ősével, T interfészeivel, T ős interfészeivel, interfész őseivel (kiterjesztés)
explicit, implicit: IRepülnitud.Repül(), IVizsga.Repül()

Eseménykezelés: callback/visszahívás, származtatással, interfésszel, event/delegált
öröklés: virtual Gomb.EseményKezelő() <- override HelloGomb.EseményKezelő()
interface: IKecskePulzusFigyelő kpe

Kivételkezelés:
Tesztelés:
Statikus: kódelleneőrzés, formai, tartalmi ellenőrzés
Dinamikus: fekete doboz, fehér doboz 
Hibakeresés: a tesztelés során feltárt hibák helyének meghatározása
indukciós, dedukciós módszer


Brute force / Nyers erő:
függvény HátizsákBF
    OPT <- [hamis, hamis, hamis, ... ,hamis]
    ciklus i <- 1-től 2^N-1-ig
        ciklus j <- 1-től N-1-ig
            K[j] <- Li/2^jL mod 2 = 1
        ciklus vége
        ha (Összsúly(K) <= Wmax) ^ (ÖsszÉrték(K) > ÖsszÉrték(OPT)) akkor
            OPT <- K
        elágazás vége
    ciklus vége
    ÖsszÉrték(OPT)
függvény vége


Osz meg és uralkods:
függvény LegjobbRészMegoldás(t, h)
    ha (t = 0) ˅ (h = 0) akkor
        vissza 0
    különben
        Pnem <- LegjobbRészMegoldás(t-1, h)
        ha h >= wt akkor
            Pigen <- pt + LegjobbRészMegoldás(t-1, h-wt)
            Popt <- max(Pigen, Pnem)
        különben
            Popt <- Pnem
        elágazás vége
        vissza Popt
    elágazás vége
függvény vége

üggvény HátizsákDnC
    vissza LegjobbRészMegoldás(N, Wmax)
függvény vége


Feljegyzéses / Memoization:
függvény LegjobbRészMegoldás(t, h)
    ha (t = 0) v (h = 0) akkor
        vissza 0
    különben
        ha RészMegoldásTárolóbanKeres([t, h]) != 0 akkor
            vissza RészMegoldásTárolóbanKeres([t, h])
        különben
            Pnem <- LegjobbRészMegoldás(t-1, h)
            ha h >= wt akkor
                Pigen <- pt + LegjobbRészMegoldás(t-1, h-wt)
                Popt <- max(Pigen, Pnem)
            különben
                Popt <- Pnem
            elágazás vége
            RészMegoldásTárolóbaFeljegyez([t, h], Popt)
            vissza Popt
        elágazás vége
    elágazás vége
függvény vége

függvény HátizsákMemo
    vissza LegjobbRészMegoldás(N, Wmax)
függvény vége


Dinamikus programozás:
függvény HátizsákDP
    ciklus t <- 0-tól N-ig
        F[t,0] <- 0
    ciklus vége
    ciklus h <- 1-től Wmax-ig
        F[0,h] <- 0
    ciklus vége
    ciklus t <- 1-től N-ig
        ciklus h <- 1-től Wmax-ig
            ha h >= wt akkor
                F[t,h] <- max(F[t-1,h], F[t-1,h-wt] + pt)
            különben
                F[t,h] <- F[t-1,h]
            elágazás vége
        ciklus vége
    ciklus vége
    vissza F[N,Wmax]
függvény vége

függvény HátizsákDPEredmény(F)
    OPT <- [hamis,hamis, ... ,hamis]
    t <- N
    h <- Wmax
    ciklus amíg (t > 0) ^ (h > 0)
        ha F[t,h] != F[t-1,h] akkor
            OPT[t] <- igaz
            h <- h - wj
        elágazás vége
        t <- t - 1
    ciklus vége
    vissza OPT
függvény vége


Mohó algoritmus:
függvény HátizsákMohó
    TárgyakRendezése(w, p)
    OPT <- [hamis,hamis, ... ,hamis]
    t <- 1
    ciklus amíg (ÖsszSúly(OPT) < Wmax) ^ (t <= N)
        ha ÖsszSúly(OPT) + wt <= Wmax akkor
            OPT[t] <- igaz
        elágazás vége
        t <- t + 1
    ciklus vége
    vissza ÖsszÉrték(OPT)
függvény vége


Visszalépéses keresés/Backtrack search/BST:
eljárás VisszalépésesKeresés(szint, címsz. E, címsz. van)
    i <- 0
    ciklus amíg !van ^ i < Mszint
        i <- i + 1
        ha Ft(szint, Rszint,i) akkor
            ha Fk(szint, Rszint,i, E) akkor
                Eszint <- Rszint,i
                ha szint = N akkor
                    van <- igaz
                    MIND <- MIND U E
                különben
                    VisszalépésesKeresés(szint + 1, E, van)
                elágazás vége
            elágazás vége
        elágazás vége
    ciklus vége
eljárás vége

van <- hamis
VisszalépésesKeresés(1, E, van)


Szétválasztás és korlátozás/Branch and bound:
függvény Fb(szint, E)
    pfk <- 0
    ciklus i <- szint + 1-től N-ig
        ha ÖsszSúly(E) + wi < Wmax akkor
            pfk <- pfk + pi
        elágazás vége
    ciklus vége
    vissza pfk
függvény vége

eljárás BB(szint, címsz. E, címsz. OPT)
    ciklus i <- 0-tól 1-ig
        E[szint] <- (i = 0)
        ha Fk(szint, E) akkor
            ha szint = N akkor
                ha ÖsszÉrték(E) > ÖsszÉrték(OPT) akkor
                    OPT <- E
                elágazás vége
            különben
                ha ÖsszÉrték(E) + Fb(szint,E) > ÖsszÉrték(OPT) akkor
                    BB(szint + 1, E, OPT)
                elágazás vége
            elágazás vége
        elágazás vége
    ciklus vége
eljárás vége


Láncoltlisták:
bejárás: nem hagy ki elemet, csak egyszer érint egy elemet
statikus: egy tömbbe van
eljárás ListaBejárás(fej)
    p <- fej
    ciklus amíg p != 0
        FELDOLGOZ(p.tart)
        p <- p.köv
    ciklus vége
eljárás vége


függvény ListábanKeresés(fej, F feltétel)
    p <- fej
    ciklus amíg (p != 0) ^ ¬F(p.tart)
        p <- p.köv
    ciklus vége
    van <- (p != 0)
    ha van akkor
        vissza (van, p.tart)
    különben
        vissza van
    elágazás vége
függvény vége


eljárás ListábaBeszúrásN(címszerint fej, érték, n)
    új <- LÉTREHOZ(M)
    új.tart <- érték
    ha (fej = 0) v (n = 1) akkor
        új.köv = fej 
        fej = új
    különben
        p <- fej 
        i <- 2
        ciklus amíg (p.köv != 0) ^ (i < n)
            p <- p.köv 
            i <- i + 1
        ciklus vége
        új.köv <- p.köv
        p.köv <- új
    elágazás vége
eljárás vége


eljárás ListábólTörlés(címszerint fej, törlendő)
    p <- fej 
    e <- 0
    ciklus amíg (p != 0) ˄ (p.tart != törlendő)
        e <- p
        p <- p.köv
    ciklus vége
    ha p != 0 akkor
        ha e = 0 akkor
            fej = p.köv
        különben
            e.köv = p.köv
        elágazás vége
        FELSZABADÍT(p)
    különben
        hiba „nincs ilyen elem”
    elágazás vége
eljárás vége


eljárás ListaTeljesTörlése(címszerint fej)
    ciklus amíg (fej != 0)
        p <- fej
        fej <- fej.köv
        FELSZABADÍT(p)
    ciklus vége
eljárás vége


függvény RendezettListábanKeresés(fej, kulcs)
    p <- fej
    ciklus amíg (p != 0) ^ (p.kulcs < kulcs)
        p <- p.köv
    ciklus vége
    van <- (p != 0) ^ (p.kulcs = kulcs)
    ha van akkor
        vissza (van, p.tart)
    különben
        vissza van
    elágazás vége
függvény vége


eljárás RendezettListábaBeszúrás(címszerint fej, kulcs, érték)
    új <- LÉTREHOZ(M) 
    új.kulcs <- kulcs 
    új.tart <- érték
    ha fej = 0 akkor
        új.köv <- 0
        fej <- új
    különben
        ha fej.kulcs > kulcs akkor
            új.köv <- fej 
            fej <- új
        különben
            p <- fej 
            e <- 0
            ciklus amíg (p != 0) ^ (p.kulcs < kulcs)
                e <- p 
                p <- p.köv
            ciklus vége
            ha p = 0 akkor
                új.köv = 0 
                e.köv = új
            különben
                új.köv = p 
                e.köv = új
            elágazás vége
        elágazás vége
    elágazás vége
eljárás vége


Bináris keresőfa/BST:
Beszúrással fa visszaépítése:
eljárás PreorderBejárás(p)
    ha p != 0 akkor
        FELDOLGOZ(p.tart)
        PreorderBejárás(p.bal)
        PreorderBejárás(p.jobb)
    elágazás vége
eljárás vége


Sorrendbe:
eljárás InorderBejárás(p)
    ha p != 0 akkor
        InorderBejárás(p.bal)
        FELDOLGOZ(p.tart)
        InorderBejárás(p.jobb)
    elágazás vége
eljárás vége


Fa törlése, levelekkel kezd:
eljárás PostorderBejárás(p)
    ha p != 0 akkor
        PostorderBejárás(p.bal)
        PostorderBejárás(p.jobb)
        FELDOLGOZ(p.tart)
    elágazás vége
eljárás vége


függvény Keresés(p, kulcs)
    ha p != 0 akkor
        ha p.kulcs > kulcs akkor
            vissza Keresés(p.bal, kulcs)
        különben
            ha p.kulcs < kulcs akkor
                vissza Keresés(p.jobb, kulcs)
            különben
                vissza p.tart
            elágazás vége
        elágazás vége
    különben
        hiba „nincs ilyen kulcs”
    elágazás vége
függvény vége


eljárás Beszúrás(címszerint p, kulcs, érték)
    ha p = 0 akkor
        p <- LÉTREHOZ(M)
        p.kulcs <- kulcs 
        p.tart <- érték
        p.bal <- 0
        p.jobb <- 0
    különben
        ha p.kulcs > kulcs akkor
            Beszúrás(p.bal, kulcs, érték)
        különben
            ha p.kulcs < kulcs akkor
                Beszúrás(p.jobb, kulcs, érték)
            különben
                hiba „már van ilyen kulcs”
            elágazás vége
        elágazás vége
    elágazás vége
eljárás vége


eljárás Törlés(címszerint p, kulcs)
    ha p != 0 akkor
        ha p.kulcs > kulcs akkor
            Törlés(p.bal, kulcs)
        különben
            ha p.kulcs < kulcs akkor
                Törlés(p.jobb, kulcs)
            különben
                ha p.bal = 0 akkor
                    q = p 
                    p <- p.jobb 
                    FELSZABADÍT(q)
                különben
                    ha p.jobb = 0 akkor
                        q = p
                        p <- p.bal
                        FELSZABADÍT(q)
                    különben
                        TörlésKétGyerek(p, p.bal)
                    elágazás vége
                elágazás vége
            elágazás vége
        elágazás vége
    különben
        hiba „Nincs ilyen elem”
    elágazás vége
eljárás vége


eljárás TörlésKétGyerek(e, címszerint r)
    ha r.jobb != 0 akkor
        TörlésKétGyerek(e, r.jobb)
    különben
        e.tart <- r.tart
        e.kulcs <- r.kulcs
        q <- r
        r <- r.bal
        FELSZABADÍT(q)
    elágazás vége
eljárás vége


Gráfok:
szomsédsági lista
csúcsmátrix
S = sor, FIFO
eljárás SzélességiBejárás(start)
    S <- start
    F <- {start}
    d[start] <- 0
    Pi[start] <- 0
    ciklus amíg S != 0
        k <- S
        Feldolgoz(k.tartalom)
        ciklus minden x eleme k.Szomszédok
            ha x nem eleme F akkor
                S <- x
                F <- F U {x}
                d[x] <- d[k] + 1
                Pi[x] <- k
            elágazás vége
        ciklus vége
    ciklus vége
eljárás vége


eljárás MélységiBejárásRek(k, címszerint F)
    F <- F U {k}
    Feldolgoz(k.tartalom)
    ciklus minden x elem k.Szomszédok
        ha x nem eleme F akkor
            MélységiBejárásRek(x, F)
        elágazás vége
    ciklus vége
eljárás vége


eljárás MélységiBejárás(start)
    F <- 0
    MélységiBejárásRek(start, F)
eljárás vége


Hasító táblázatok
eljárás Beszúrás(címszerint A, h, kulcs, érték)
    A[h(kulcs)].kulcs <- kulcs
    A[h(kulcs)].tart <- érték
eljárás vége


függvény Keresés(A, h, kulcs)
    ha A[h(kulcs)].kulcs != 0 akkor
        vissza A[h(kulcs)].tart
    különben
        hiba „nincs ilyen kulcs”
    elágazás vége
eljárás vége


eljárás Törlés(címszerint A, h, kulcs)
    A[h(kulcs)].kulcs <- 0
eljárás vége


Túlcsordulásos táblával:
eljárás Beszúrás(címszerint A, h, kulcs, érték)
    i <- h(kulcs)
    ha A[i].kulcs = 0 akkor
        A[i].kulcs <- kulcs
        A[i].tart <- érték
    különben
        TúlcsodulásiTerületBeszúr(kulcs,érték)
    elágazás vége
eljárás vége


függvény Keresés(A, h, kulcs)
    i <- h(kulcs)
    ha A[i].kulcs = kulcs akkor
        vissza A[i].tartalom
    különben
        ha TúlcsodulásiTerületKeres(kulcs) akkor
            elem <- TúlcsodulásiTerületOlvas(kulcs)
            vissza elem
        különben
            hiba ”Nincs ilyen kulcs”
        elágazás vége
    elágazás vége
függvény vége


eljárás Törlés(címsz. A, h, kulcs)
    i <- h(kulcs)
    ha A[i].kulcs = kulcs akkor
        A[i].kulcs <- 0
    különben
        ha TúlcsodulásiTerületKeres(kulcs) akkor
            TúlcsodulásiTerületTöröl(kulcs)
        elágazás vége
    elágazás vége
eljárás vége


függvény Dijkstra(G, start)
    ciklus minden x eleme G.Csúcsok
        d[x] <- végtelen
        Pi[x] <- 0
        S <= x
    ciklus vége
    d[start] <- 0
    ciklus amíg S != 0
        u <- S.MinKivesz(d)
        ciklus minden x eleme u.Szomszédok
            ha d[u] + u.Súly(x) < d[x] akkor
                d[x] <- d[u] + u.Súly(x)
                Pi[x] <- u
            elágazás vége
        ciklus vége
    ciklus vége
    vissza (Pi, d)
függvény vége


Feszítőfa keresés élek vágásával:
függvény Prim(G, start)
    ciklus minden x eleme G.Csúcsok
        k[x] <- végtelen 
        Pi[x] <- 0
        S <= x
    ciklus vége
    k[start] <- 0
    ciklus amíg S != 0
        u <- S.MinKivesz(k)
        ciklus minden x eleme u.Szomszédok
            ha x eleme S ^ u.Súly(x) < k[x] akkor
                k[x] <- u.Súly(x)
                Pi[x] <- u
            elágazás vége
        ciklus vége
    ciklus vége
    vissza Pi
függvény vége

Halmaz összevonással:
függvény Kruskal(G)
    ciklus minden x eleme G.Csúcsok
        Halmaz-létrehozás(x)
    ciklus vége
    ciklus minden (u,v) eleme G.Élek
        S <= (u,v)
    ciklus vége
    ciklus amíg S != 0
        (u,v) <- S.MinKivesz(súly)
        ha Tartalmazó-halmaz(u) != Tartalmazó-halmaz(v) akkor
            A <- A U {(u,v)}
            Halmaz-összevonás(Tartalmazó-halmaz(u), Tartalmazó-halmaz(v))
        elágazás vége
    ciklus vége
    vissza A
függvény vége


B-fa:

Paradigmák:



